%% Generated with 'testgen v0.2.0'
%% Revision 1 of the exercises generator was used
%% https://github.com/exercism/problem-specifications/raw/42dd0cea20498fd544b152c4e2c0a419bb7e266a/exercises/complex-numbers/canonical-data.json
%% This file is automatically generated from the exercises canonical data.

-module(complex_numbers_tests).

-include_lib("erl_exercism/include/exercism.hrl").
-include_lib("eunit/include/eunit.hrl").




'1_real_part_of_a_purely_real_number_test_'() ->
    {"Real part of a purely real number",
     ?_assert(1 ==
		complex_numbers:real(complex_numbers:new(1, 0)))}.

'2_real_part_of_a_purely_imaginary_number_test_'() ->
    {"Real part of a purely imaginary number",
     ?_assert(0 ==
		complex_numbers:real(complex_numbers:new(0, 1)))}.

'3_real_part_of_a_number_with_real_and_imaginary_part_test_'() ->
    {"Real part of a number with real and "
     "imaginary part",
     ?_assert(1 ==
		complex_numbers:real(complex_numbers:new(1, 2)))}.

'4_imaginary_part_of_a_purely_real_number_test_'() ->
    {"Imaginary part of a purely real number",
     ?_assert(0 ==
		complex_numbers:imaginary(complex_numbers:new(1, 0)))}.

'5_imaginary_part_of_a_purely_imaginary_number_test_'() ->
    {"Imaginary part of a purely imaginary "
     "number",
     ?_assert(1 ==
		complex_numbers:imaginary(complex_numbers:new(0, 1)))}.

'6_imaginary_part_of_a_number_with_real_and_imaginary_part_test_'() ->
    {"Imaginary part of a number with real "
     "and imaginary part",
     ?_assert(2 ==
		complex_numbers:imaginary(complex_numbers:new(1, 2)))}.

'7_imaginary_unit_test_'() ->
    {"Imaginary unit",
     ?_assert(complex_numbers:equal(complex_numbers:new(-1,
							0),
				    complex_numbers:mul(complex_numbers:new(0,
									    1),
							complex_numbers:new(0,
									    1))))}.

'8_add_purely_real_numbers_test_'() ->
    {"Add purely real numbers",
     ?_assert(complex_numbers:equal(complex_numbers:new(3,
							0),
				    complex_numbers:add(complex_numbers:new(1,
									    0),
							complex_numbers:new(2,
									    0))))}.

'9_add_purely_imaginary_numbers_test_'() ->
    {"Add purely imaginary numbers",
     ?_assert(complex_numbers:equal(complex_numbers:new(0,
							3),
				    complex_numbers:add(complex_numbers:new(0,
									    1),
							complex_numbers:new(0,
									    2))))}.

'10_add_numbers_with_real_and_imaginary_part_test_'() ->
    {"Add numbers with real and imaginary "
     "part",
     ?_assert(complex_numbers:equal(complex_numbers:new(4,
							6),
				    complex_numbers:add(complex_numbers:new(1,
									    2),
							complex_numbers:new(3,
									    4))))}.

'11_subtract_purely_real_numbers_test_'() ->
    {"Subtract purely real numbers",
     ?_assert(complex_numbers:equal(complex_numbers:new(-1,
							0),
				    complex_numbers:sub(complex_numbers:new(1,
									    0),
							complex_numbers:new(2,
									    0))))}.

'12_subtract_purely_imaginary_numbers_test_'() ->
    {"Subtract purely imaginary numbers",
     ?_assert(complex_numbers:equal(complex_numbers:new(0,
							-1),
				    complex_numbers:sub(complex_numbers:new(0,
									    1),
							complex_numbers:new(0,
									    2))))}.

'13_subtract_numbers_with_real_and_imaginary_part_test_'() ->
    {"Subtract numbers with real and imaginary "
     "part",
     ?_assert(complex_numbers:equal(complex_numbers:new(-2,
							-2),
				    complex_numbers:sub(complex_numbers:new(1,
									    2),
							complex_numbers:new(3,
									    4))))}.

'14_multiply_purely_real_numbers_test_'() ->
    {"Multiply purely real numbers",
     ?_assert(complex_numbers:equal(complex_numbers:new(2,
							0),
				    complex_numbers:mul(complex_numbers:new(1,
									    0),
							complex_numbers:new(2,
									    0))))}.

'15_multiply_purely_imaginary_numbers_test_'() ->
    {"Multiply purely imaginary numbers",
     ?_assert(complex_numbers:equal(complex_numbers:new(-2,
							0),
				    complex_numbers:mul(complex_numbers:new(0,
									    1),
							complex_numbers:new(0,
									    2))))}.

'16_multiply_numbers_with_real_and_imaginary_part_test_'() ->
    {"Multiply numbers with real and imaginary "
     "part",
     ?_assert(complex_numbers:equal(complex_numbers:new(-5,
							10),
				    complex_numbers:mul(complex_numbers:new(1,
									    2),
							complex_numbers:new(3,
									    4))))}.

'17_divide_purely_real_numbers_test_'() ->
    {"Divide purely real numbers",
     ?_assert(complex_numbers:equal(complex_numbers:new(5.0e-1,
							0),
				    complex_numbers:divide(complex_numbers:new(1,
									       0),
							   complex_numbers:new(2,
									       0))))}.

'18_divide_purely_imaginary_numbers_test_'() ->
    {"Divide purely imaginary numbers",
     ?_assert(complex_numbers:equal(complex_numbers:new(5.0e-1,
							0),
				    complex_numbers:divide(complex_numbers:new(0,
									       1),
							   complex_numbers:new(0,
									       2))))}.

'19_divide_numbers_with_real_and_imaginary_part_test_'() ->
    {"Divide numbers with real and imaginary "
     "part",
     ?_assert(complex_numbers:equal(complex_numbers:new(4.4e-1,
							8.0e-2),
				    complex_numbers:divide(complex_numbers:new(1,
									       2),
							   complex_numbers:new(3,
									       4))))}.

'20_absolute_value_of_a_positive_purely_real_number_test_'() ->
    {"Absolute value of a positive purely "
     "real number",
     ?_assert(5 ==
		complex_numbers:abs(complex_numbers:new(5, 0)))}.

'21_absolute_value_of_a_negative_purely_real_number_test_'() ->
    {"Absolute value of a negative purely "
     "real number",
     ?_assert(5 ==
		complex_numbers:abs(complex_numbers:new(-5, 0)))}.

'22_absolute_value_of_a_purely_imaginary_number_with_positive_imaginary_part_test_'() ->
    {"Absolute value of a purely imaginary "
     "number with positive imaginary part",
     ?_assert(5 ==
		complex_numbers:abs(complex_numbers:new(0, 5)))}.

'23_absolute_value_of_a_purely_imaginary_number_with_negative_imaginary_part_test_'() ->
    {"Absolute value of a purely imaginary "
     "number with negative imaginary part",
     ?_assert(5 ==
		complex_numbers:abs(complex_numbers:new(0, -5)))}.

'24_absolute_value_of_a_number_with_real_and_imaginary_part_test_'() ->
    {"Absolute value of a number with real "
     "and imaginary part",
     ?_assert(5 ==
		complex_numbers:abs(complex_numbers:new(3, 4)))}.

'25_conjugate_a_purely_real_number_test_'() ->
    {"Conjugate a purely real number",
     ?_assert(complex_numbers:equal(complex_numbers:new(5,
							0),
				    complex_numbers:conjugate(complex_numbers:new(5,
										  0))))}.

'26_conjugate_a_purely_imaginary_number_test_'() ->
    {"Conjugate a purely imaginary number",
     ?_assert(complex_numbers:equal(complex_numbers:new(0,
							-5),
				    complex_numbers:conjugate(complex_numbers:new(0,
										  5))))}.

'27_conjugate_a_number_with_real_and_imaginary_part_test_'() ->
    {"Conjugate a number with real and imaginary "
     "part",
     ?_assert(complex_numbers:equal(complex_numbers:new(1,
							-1),
				    complex_numbers:conjugate(complex_numbers:new(1,
										  1))))}.

'28_eulers_identityformula_test_'() ->
    {"Euler's identity/formula",
     ?_assert(complex_numbers:equal(complex_numbers:new(-1,
							0),
				    complex_numbers:exp(complex_numbers:new(0,
									    3.14159265358979311600))))}.

'29_exponential_of_0_test_'() ->
    {"Exponential of 0",
     ?_assert(complex_numbers:equal(complex_numbers:new(1,
							0),
				    complex_numbers:exp(complex_numbers:new(0,
									    0))))}.

'30_exponential_of_a_purely_real_number_test_'() ->
    {"Exponential of a purely real number",
     ?_assert(complex_numbers:equal(complex_numbers:new(2.71828182845904509080,
							0),
				    complex_numbers:exp(complex_numbers:new(1,
									    0))))}.

'31_exponential_of_a_number_with_real_and_imaginary_part_test_'() ->
    {"Exponential of a number with real and "
     "imaginary part",
     ?_assert(complex_numbers:equal(complex_numbers:new(-2,
							0),
				    complex_numbers:exp(complex_numbers:new(6.93147180559945286227e-1,
									    3.14159265358979311600))))}.
