%% Generated with 'testgen v0.2.0'
%% Revision 1 of the exercises generator was used
%% https://github.com/exercism/problem-specifications/raw/42dd0cea20498fd544b152c4e2c0a419bb7e266a/exercises/connect/canonical-data.json
%% This file is automatically generated from the exercises canonical data.

-module(connect_tests).

-include_lib("erl_exercism/include/exercism.hrl").
-include_lib("eunit/include/eunit.hrl").




'1_an_empty_board_has_no_winner_test_'() ->
    Input=[
        ". . . . .",
        " . . . . .",
        "  . . . . .",
        "   . . . . .",
        "    . . . . ."
    ],
    {"an empty board has no winner",
     ?_assertEqual(undefined, connect:winner(Input))}.

'2_x_can_win_on_a_1x1_board_test_'() ->
    Input=[
        "X"
    ],
    {"X can win on a 1x1 board",
     ?_assertEqual(x, connect:winner(Input))}.

'3_o_can_win_on_a_1x1_board_test_'() ->
    Input=[
        "O"
    ],
    {"O can win on a 1x1 board",
     ?_assertEqual(o, connect:winner(Input))}.

'4_only_edges_does_not_make_a_winner_test_'() ->
    Input=[
        "O O O X",
        " X . . X",
        "  X . . X",
        "   X O O O"
    ],
    {"only edges does not make a winner",
     ?_assertEqual(undefined, connect:winner(Input))}.

'5_illegal_diagonal_does_not_make_a_winner_test_'() ->
    Input=[
        "X O . .",
        " O X X X",
        "  O X O .",
        "   . O X .",
        "    X X O O"
    ],
    {"illegal diagonal does not make a winner",
     ?_assertEqual(undefined, connect:winner(Input))}.

'6_nobody_wins_crossing_adjacent_angles_test_'() ->
    Input=[
        "X . . .",
        " . X O .",
        "  O . X O",
        "   . O . X",
        "    . . O ."
    ],
    {"nobody wins crossing adjacent angles",
     ?_assertEqual(undefined, connect:winner(Input))}.

'7_x_wins_crossing_from_left_to_right_test_'() ->
    Input=[
        ". O . .",
        " O X X X",
        "  O X O .",
        "   X X O X",
        "    . O X ."
    ],
    {"X wins crossing from left to right",
     ?_assertEqual(x, connect:winner(Input))}.

'8_o_wins_crossing_from_top_to_bottom_test_'() ->
    Input=[
        ". O . .",
        " O X X X",
        "  O O O .",
        "   X X O X",
        "    . O X ."
    ],
    {"O wins crossing from top to bottom",
     ?_assertEqual(o, connect:winner(Input))}.

'9_x_wins_using_a_convoluted_path_test_'() ->
    Input=[
        ". X X . .",
        " X . X . X",
        "  . X . X .",
        "   . X X . .",
        "    O O O O O"
    ],
    {"X wins using a convoluted path",
     ?_assertEqual(x, connect:winner(Input))}.

'10_x_wins_using_a_spiral_path_test_'() ->
    Input=[
        "O X X X X X X X X",
        " O X O O O O O O O",
        "  O X O X X X X X O",
        "   O X O X O O O X O",
        "    O X O X X X O X O",
        "     O X O O O X O X O",
        "      O X X X X X O X O",
        "       O O O O O O O X O",
        "        X X X X X X X X O"
    ],
    {"X wins using a spiral path",
     ?_assertEqual(x, connect:winner(Input))}.
