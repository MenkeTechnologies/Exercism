%% Generated with 'testgen v0.2.0'
%% Revision 1 of the exercises generator was used
%% https://github.com/exercism/problem-specifications/raw/42dd0cea20498fd544b152c4e2c0a419bb7e266a/exercises/word-count/canonical-data.json
%% This file is automatically generated from the exercises canonical data.

-module(word_count_tests).

-include_lib("erl_exercism/include/exercism.hrl").
-include_lib("eunit/include/eunit.hrl").


assertCount(Exp0, Actual0) ->
    Exp1=lists:sort(maps:to_list(Exp0)),
    Actual1=lists:sort(maps:to_list(Actual0)),
    ?assertMatch(Exp1, Actual1).


'1_count_one_word_test_'() ->
    {"count one word",
     ?_test(assertCount(#{"word" => 1},
			word_count:count_words("word")))}.

'2_count_one_of_each_word_test_'() ->
    {"count one of each word",
     ?_test(assertCount(#{"each" => 1, "of" => 1,
			  "one" => 1},
			word_count:count_words("one of each")))}.

'3_multiple_occurrences_of_a_word_test_'() ->
    {"multiple occurrences of a word",
     ?_test(assertCount(#{"blue" => 1, "fish" => 4,
			  "one" => 1, "red" => 1, "two" => 1},
			word_count:count_words("one fish two fish red fish blue fish")))}.

'4_handles_cramped_lists_test_'() ->
    {"handles cramped lists",
     ?_test(assertCount(#{"one" => 1, "three" => 1,
			  "two" => 1},
			word_count:count_words("one,two,three")))}.

'5_handles_expanded_lists_test_'() ->
    {"handles expanded lists",
     ?_test(assertCount(#{"one" => 1, "three" => 1,
			  "two" => 1},
			word_count:count_words("one,\ntwo,\nthree")))}.

'6_ignore_punctuation_test_'() ->
    {"ignore punctuation",
     ?_test(assertCount(#{"as" => 1, "car" => 1,
			  "carpet" => 1, "java" => 1, "javascript" => 1},
			word_count:count_words("car: carpet as java: javascript!!&@$%^&")))}.

'7_include_numbers_test_'() ->
    {"include numbers",
     ?_test(assertCount(#{"1" => 1, "2" => 1,
			  "testing" => 2},
			word_count:count_words("testing, 1, 2 testing")))}.

'8_normalize_case_test_'() ->
    {"normalize case",
     ?_test(assertCount(#{"go" => 3, "stop" => 2},
			word_count:count_words("go Go GO Stop stop")))}.

'9_with_apostrophes_test_'() ->
    {"with apostrophes",
     ?_test(assertCount(#{"cry" => 1, "don't" => 2,
			  "first" => 1, "laugh" => 1, "then" => 1},
			word_count:count_words("First: don't laugh. Then: don't cry.")))}.

'10_with_quotations_test_'() ->
    {"with quotations",
     ?_test(assertCount(#{"and" => 1, "between" => 1,
			  "can't" => 1, "joe" => 1, "large" => 2, "tell" => 1},
			word_count:count_words("Joe can't tell between 'large' and large.")))}.

'11_substrings_from_the_beginning_test_'() ->
    {"substrings from the beginning",
     ?_test(assertCount(#{"a" => 1, "and" => 1, "app" => 1,
			  "apple" => 1, "between" => 1, "can't" => 1,
			  "joe" => 1, "tell" => 1},
			word_count:count_words("Joe can't tell between app, apple and a.")))}.

'12_multiple_spaces_not_detected_as_a_word_test_'() ->
    {"multiple spaces not detected as a word",
     ?_test(assertCount(#{"multiple" => 1,
			  "whitespaces" => 1},
			word_count:count_words(" multiple   whitespaces")))}.

'13_alternating_word_separators_not_detected_as_a_word_test_'() ->
    {"alternating word separators not detected "
     "as a word",
     ?_test(assertCount(#{"one" => 1, "three" => 1,
			  "two" => 1},
			word_count:count_words(",\n,one,\n ,two \n 'three'")))}.
