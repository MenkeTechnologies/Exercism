%% Generated with 'testgen v0.2.0'
%% Revision 1 of the exercises generator was used
%% https://github.com/exercism/problem-specifications/raw/42dd0cea20498fd544b152c4e2c0a419bb7e266a/exercises/luhn/canonical-data.json
%% This file is automatically generated from the exercises canonical data.

-module(luhn_tests).

-include_lib("erl_exercism/include/exercism.hrl").
-include_lib("eunit/include/eunit.hrl").




'1_single_digit_strings_can_not_be_valid_test_'() ->
    {"single digit strings can not be valid",
     ?_assertNot(luhn:valid("1"))}.

'2_a_single_zero_is_invalid_test_'() ->
    {"a single zero is invalid",
     ?_assertNot(luhn:valid("0"))}.

'3_a_simple_valid_sin_that_remains_valid_if_reversed_test_'() ->
    {"a simple valid SIN that remains valid "
     "if reversed",
     ?_assert(luhn:valid("059"))}.

'4_a_simple_valid_sin_that_becomes_invalid_if_reversed_test_'() ->
    {"a simple valid SIN that becomes invalid "
     "if reversed",
     ?_assert(luhn:valid("59"))}.

'5_a_valid_canadian_sin_test_'() ->
    {"a valid Canadian SIN",
     ?_assert(luhn:valid("055 444 285"))}.

'6_invalid_canadian_sin_test_'() ->
    {"invalid Canadian SIN",
     ?_assertNot(luhn:valid("055 444 286"))}.

'7_invalid_credit_card_test_'() ->
    {"invalid credit card",
     ?_assertNot(luhn:valid("8273 1232 7352 0569"))}.

'8_invalid_long_number_with_an_even_remainder_test_'() ->
    {"invalid long number with an even remainder",
     ?_assertNot(luhn:valid("1 2345 6789 1234 5678 9012"))}.

'9_valid_number_with_an_even_number_of_digits_test_'() ->
    {"valid number with an even number of "
     "digits",
     ?_assert(luhn:valid("095 245 88"))}.

'10_valid_number_with_an_odd_number_of_spaces_test_'() ->
    {"valid number with an odd number of spaces",
     ?_assert(luhn:valid("234 567 891 234"))}.

'11_valid_strings_with_a_non_digit_added_at_the_end_become_invalid_test_'() ->
    {"valid strings with a non-digit added "
     "at the end become invalid",
     ?_assertNot(luhn:valid("059a"))}.

'12_valid_strings_with_punctuation_included_become_invalid_test_'() ->
    {"valid strings with punctuation included "
     "become invalid",
     ?_assertNot(luhn:valid("055-444-285"))}.

'13_valid_strings_with_symbols_included_become_invalid_test_'() ->
    {"valid strings with symbols included "
     "become invalid",
     ?_assertNot(luhn:valid("055# 444$ 285"))}.

'14_single_zero_with_space_is_invalid_test_'() ->
    {"single zero with space is invalid",
     ?_assertNot(luhn:valid(" 0"))}.

'15_more_than_a_single_zero_is_valid_test_'() ->
    {"more than a single zero is valid",
     ?_assert(luhn:valid("0000 0"))}.

'16_input_digit_9_is_correctly_converted_to_output_digit_9_test_'() ->
    {"input digit 9 is correctly converted "
     "to output digit 9",
     ?_assert(luhn:valid("091"))}.

'17_using_ascii_value_for_non_doubled_non_digit_isnt_allowed_test_'() ->
    {"using ascii value for non-doubled non-digit "
     "isn't allowed",
     ?_assertNot(luhn:valid("055b 444 285"))}.

'18_using_ascii_value_for_doubled_non_digit_isnt_allowed_test_'() ->
    {"using ascii value for doubled non-digit "
     "isn't allowed",
     ?_assertNot(luhn:valid(":9"))}.
