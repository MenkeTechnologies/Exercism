%% Generated with 'testgen v0.2.0'
%% Revision 1 of the exercises generator was used
%% https://github.com/exercism/problem-specifications/raw/42dd0cea20498fd544b152c4e2c0a419bb7e266a/exercises/palindrome-products/canonical-data.json
%% This file is automatically generated from the exercises canonical data.

-module(palindrome_products_tests).

-include_lib("erl_exercism/include/exercism.hrl").
-include_lib("eunit/include/eunit.hrl").


normalize({V, F}) ->
    {
        V,
        lists:sort(
            lists:map(
                fun
                    ({A, B}) when A>B -> {B, A};
                    (AB) -> AB
                end,
                F
            )
        )
    }.


'1_finds_the_smallest_palindrome_from_single_digit_factors_test_'() ->
    {"finds the smallest palindrome from single "
     "digit factors",
     ?_assertEqual(normalize({1, [{1, 1}]}),
		   normalize(palindrome_products:smallest(1, 9)))}.

'2_finds_the_largest_palindrome_from_single_digit_factors_test_'() ->
    {"finds the largest palindrome from single "
     "digit factors",
     ?_assertEqual(normalize({9, [{1, 9}, {3, 3}]}),
		   normalize(palindrome_products:largest(1, 9)))}.

'3_find_the_smallest_palindrome_from_double_digit_factors_test_'() ->
    {"find the smallest palindrome from double "
     "digit factors",
     ?_assertEqual(normalize({121, [{11, 11}]}),
		   normalize(palindrome_products:smallest(10, 99)))}.

'4_find_the_largest_palindrome_from_double_digit_factors_test_'() ->
    {"find the largest palindrome from double "
     "digit factors",
     ?_assertEqual(normalize({9009, [{91, 99}]}),
		   normalize(palindrome_products:largest(10, 99)))}.

'5_find_smallest_palindrome_from_triple_digit_factors_test_'() ->
    {"find smallest palindrome from triple "
     "digit factors",
     ?_assertEqual(normalize({10201, [{101, 101}]}),
		   normalize(palindrome_products:smallest(100, 999)))}.

'6_find_the_largest_palindrome_from_triple_digit_factors_test_'() ->
    {"find the largest palindrome from triple "
     "digit factors",
     ?_assertEqual(normalize({906609, [{913, 993}]}),
		   normalize(palindrome_products:largest(100, 999)))}.

'7_find_smallest_palindrome_from_four_digit_factors_test_'() ->
    {"find smallest palindrome from four digit "
     "factors",
     ?_assertEqual(normalize({1002001, [{1001, 1001}]}),
		   normalize(palindrome_products:smallest(1000, 9999)))}.

'8_find_the_largest_palindrome_from_four_digit_factors_test_'() ->
    {"find the largest palindrome from four "
     "digit factors",
     ?_assertEqual(normalize({99000099, [{9901, 9999}]}),
		   normalize(palindrome_products:largest(1000, 9999)))}.

'9_empty_result_for_smallest_if_no_palindrome_in_the_range_test_'() ->
    {"empty result for smallest if no palindrome "
     "in the range",
     ?_assertEqual(undefined,
		   palindrome_products:smallest(1002, 1003))}.

'10_empty_result_for_largest_if_no_palindrome_in_the_range_test_'() ->
    {"empty result for largest if no palindrome "
     "in the range",
     ?_assertEqual(undefined,
		   palindrome_products:largest(15, 15))}.

'11_error_result_for_smallest_if_min_is_more_than_max_test_'() ->
    {"error result for smallest if min is "
     "more than max",
     ?_assertError(_,
		   palindrome_products:smallest(10000, 1))}.

'12_error_result_for_largest_if_min_is_more_than_max_test_'() ->
    {"error result for largest if min is more "
     "than max",
     ?_assertError(_, palindrome_products:largest(2, 1))}.
