%% Generated with 'testgen v0.2.0'
%% Revision 1 of the exercises generator was used
%% https://github.com/exercism/problem-specifications/raw/448e975bd8bc59491c9c119dba92d26b28674c5e/exercises/change/canonical-data.json
%% This file is automatically generated from the exercises canonical data.

-module(change_tests).

-include_lib("erl_exercism/include/exercism.hrl").
-include_lib("eunit/include/eunit.hrl").




'1_change_for_1_cent_test_'() ->
    Target = 1,
    Coins = [1, 5, 10, 25],
    Expected = [1],
    {"change for 1 cent",
     ?_assertEqual(Expected,
		   change:find_fewest_coins(Target, Coins))}.

'2_single_coin_change_test_'() ->
    Target = 25,
    Coins = [1, 5, 10, 25, 100],
    Expected = [25],
    {"single coin change",
     ?_assertEqual(Expected,
		   change:find_fewest_coins(Target, Coins))}.

'3_multiple_coin_change_test_'() ->
    Target = 15,
    Coins = [1, 5, 10, 25, 100],
    Expected = [5, 10],
    {"multiple coin change",
     ?_assertEqual(Expected,
		   change:find_fewest_coins(Target, Coins))}.

'4_change_with_lilliputian_coins_test_'() ->
    Target = 23,
    Coins = [1, 4, 15, 20, 50],
    Expected = [4, 4, 15],
    {"change with Lilliputian Coins",
     ?_assertEqual(Expected,
		   change:find_fewest_coins(Target, Coins))}.

'5_change_with_lower_elbonia_coins_test_'() ->
    Target = 63,
    Coins = [1, 5, 10, 21, 25],
    Expected = [21, 21, 21],
    {"change with Lower Elbonia Coins",
     ?_assertEqual(Expected,
		   change:find_fewest_coins(Target, Coins))}.

'6_large_target_values_test_'() ->
    Target = 999,
    Coins = [1, 2, 5, 10, 20, 50, 100],
    Expected =
	[2, 2, 5, 20, 20, 50, 100, 100, 100, 100, 100, 100, 100, 100, 100],
    {"large target values",
     ?_assertEqual(Expected,
		   change:find_fewest_coins(Target, Coins))}.

'7_possible_change_without_unit_coins_available_test_'() ->
    Target = 21,
    Coins = [2, 5, 10, 20, 50],
    Expected = [2, 2, 2, 5, 10],
    {"possible change without unit coins available",
     ?_assertEqual(Expected,
		   change:find_fewest_coins(Target, Coins))}.

'8_another_possible_change_without_unit_coins_available_test_'() ->
    Target = 27,
    Coins = [4, 5],
    Expected = [4, 4, 4, 5, 5, 5],
    {"another possible change without unit "
     "coins available",
     ?_assertEqual(Expected,
		   change:find_fewest_coins(Target, Coins))}.

'9_no_coins_make_0_change_test_'() ->
    Target = 0,
    Coins = [1, 5, 10, 21, 25],
    Expected = [],
    {"no coins make 0 change",
     ?_assertEqual(Expected,
		   change:find_fewest_coins(Target, Coins))}.

'10_error_testing_for_change_smaller_than_the_smallest_of_coins_test_'() ->
    Target = 3,
    Coins = [5, 10],
    Expected = undefined,
    {"error testing for change smaller than "
     "the smallest of coins",
     ?_assertEqual(Expected,
		   change:find_fewest_coins(Target, Coins))}.

'11_error_if_no_combination_can_add_up_to_target_test_'() ->
    Target = 94,
    Coins = [5, 10],
    Expected = undefined,
    {"error if no combination can add up to "
     "target",
     ?_assertEqual(Expected,
		   change:find_fewest_coins(Target, Coins))}.

'12_cannot_find_negative_change_values_test_'() ->
    Target = -5,
    Coins = [1, 2, 5],
    {"cannot find negative change values",
     ?_assertError(_,
		   change:find_fewest_coins(Target, Coins))}.
