%% Generated with 'testgen v0.2.0'
%% Revision 1 of the exercises generator was used
%% https://github.com/exercism/problem-specifications/raw/42dd0cea20498fd544b152c4e2c0a419bb7e266a/exercises/triangle/canonical-data.json
%% This file is automatically generated from the exercises canonical data.

-module(triangle_tests).

-include_lib("erl_exercism/include/exercism.hrl").
-include_lib("eunit/include/eunit.hrl").




'1_equilateral_all_sides_are_equal_test_'() ->
    {"equilateral_all sides are equal",
     ?_assertMatch(equilateral, triangle:kind(2, 2, 2))}.

'2_equilateral_all_zero_sides_is_not_a_triangle_test_'() ->
    {"equilateral_all zero sides is not a "
     "triangle",
     ?_assertMatch({error,
		    "all side lengths must be positive"},
		   triangle:kind(0, 0, 0))}.

'3_equilateral_sides_may_be_floats_test_'() ->
    {"equilateral_sides may be floats",
     ?_assertMatch(equilateral,
		   triangle:kind(5.0e-1, 5.0e-1, 5.0e-1))}.

'4_isosceles_last_two_sides_are_equal_test_'() ->
    {"isosceles_last two sides are equal",
     ?_assertMatch(isosceles, triangle:kind(3, 4, 4))}.

'5_isosceles_first_two_sides_are_equal_test_'() ->
    {"isosceles_first two sides are equal",
     ?_assertMatch(isosceles, triangle:kind(4, 4, 3))}.

'6_isosceles_first_and_last_sides_are_equal_test_'() ->
    {"isosceles_first and last sides are equal",
     ?_assertMatch(isosceles, triangle:kind(4, 3, 4))}.

'7_isosceles_first_triangle_inequality_violation_test_'() ->
    {"isosceles_first triangle inequality "
     "violation",
     ?_assertMatch({error,
		    "side lengths violate triangle inequality"},
		   triangle:kind(1, 1, 3))}.

'8_isosceles_second_triangle_inequality_violation_test_'() ->
    {"isosceles_second triangle inequality "
     "violation",
     ?_assertMatch({error,
		    "side lengths violate triangle inequality"},
		   triangle:kind(1, 3, 1))}.

'9_isosceles_third_triangle_inequality_violation_test_'() ->
    {"isosceles_third triangle inequality "
     "violation",
     ?_assertMatch({error,
		    "side lengths violate triangle inequality"},
		   triangle:kind(3, 1, 1))}.

'10_isosceles_sides_may_be_floats_test_'() ->
    {"isosceles_sides may be floats",
     ?_assertMatch(isosceles,
		   triangle:kind(5.0e-1, 4.0e-1, 5.0e-1))}.

'11_scalene_no_sides_are_equal_test_'() ->
    {"scalene_no sides are equal",
     ?_assertMatch(scalene, triangle:kind(5, 4, 6))}.

'12_scalene_may_not_violate_triangle_inequality_test_'() ->
    {"scalene_may not violate triangle inequality",
     ?_assertMatch({error,
		    "side lengths violate triangle inequality"},
		   triangle:kind(7, 3, 2))}.

'13_scalene_sides_may_be_floats_test_'() ->
    {"scalene_sides may be floats",
     ?_assertMatch(scalene,
		   triangle:kind(5.0e-1, 4.0e-1,
				 5.99999999999999977796e-1))}.
