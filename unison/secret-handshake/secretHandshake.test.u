secretHandshake.commands.tests.ex1 =
  expect ([Wink] === secretHandshake.commands 1)
    |> Test.label "wink for 1"

secretHandshake.commands.tests.ex2 =
  expect ([DoubleBlink] === secretHandshake.commands 2)
    |> Test.label "double blink for 10"

secretHandshake.commands.tests.ex3 =
  expect ([CloseYourEyes] === secretHandshake.commands 4)
    |> Test.label "close your eyes for 100"

secretHandshake.commands.tests.ex4 =
  expect ([Jump] === secretHandshake.commands 8)
    |> Test.label "jump for 1000"

secretHandshake.commands.tests.ex5 =
  expect ([Wink, DoubleBlink] === secretHandshake.commands 3)
    |> Test.label "combine two actions"

secretHandshake.commands.tests.ex6 =
  expect ([DoubleBlink, Wink] === secretHandshake.commands 19)
    |> Test.label "reverse two actions"

secretHandshake.commands.tests.ex7 =
  expect ([Jump] === secretHandshake.commands 24)
    |> Test.label "reversing one action gives the same action"

secretHandshake.commands.tests.ex8 =
  expect ([] === secretHandshake.commands 16)
    |> Test.label "reversing no actions still gives no actions"

secretHandshake.commands.tests.ex9 =
  expect ([Wink, DoubleBlink, CloseYourEyes, Jump] === secretHandshake.commands 15)
    |> Test.label "all possible actions"

secretHandshake.commands.tests.ex10 =
  expect ([Jump, CloseYourEyes, DoubleBlink, Wink] === secretHandshake.commands 31)
    |> Test.label "reverse all possible actions"

secretHandshake.commands.tests.ex11 =
  expect ([] === secretHandshake.commands 0)
    |> Test.label "do nothing for zero"

test> secretHandshake.tests = runAll [
  secretHandshake.commands.tests.ex1,
  secretHandshake.commands.tests.ex2,
  secretHandshake.commands.tests.ex3,
  secretHandshake.commands.tests.ex4,
  secretHandshake.commands.tests.ex5,
  secretHandshake.commands.tests.ex6,
  secretHandshake.commands.tests.ex7,
  secretHandshake.commands.tests.ex8,
  secretHandshake.commands.tests.ex9,
  secretHandshake.commands.tests.ex10,
  secretHandshake.commands.tests.ex11
]
