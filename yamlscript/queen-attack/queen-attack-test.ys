#!/usr/bin/env ys-0

require ys::taptest: :all

use: queen-attack

test::
- name: Queen with a valid position
  code: create({"position" {"row" 2, "column" 2}})
  want: 0

- name: Queen must have positive row
  code: create({"position" {"row" -2, "column" 2}})
  what: error
  want: row not positive

- name: Queen must have row on board
  code: create({"position" {"row" 8, "column" 4}})
  what: error
  want: row not on board

- name: Queen must have positive column
  code: create({"position" {"row" 2, "column" -2}})
  what: error
  want: column not positive

- name: Queen must have column on board
  code: create({"position" {"row" 4, "column" 8}})
  what: error
  want: column not on board

- name: Cannot attack
  code: can-attack({"position" {"row" 2, "column" 4}} {"position" {"row" 6, "column" 6}})
  want: false

- name: Can attack on same row
  code: can-attack({"position" {"row" 2, "column" 4}} {"position" {"row" 2, "column" 6}})
  want: true

- name: Can attack on same column
  code: can-attack({"position" {"row" 4, "column" 5}} {"position" {"row" 2, "column" 5}})
  want: true

- name: Can attack on first diagonal
  code: can-attack({"position" {"row" 2, "column" 2}} {"position" {"row" 0, "column" 4}})
  want: true

- name: Can attack on second diagonal
  code: can-attack({"position" {"row" 2, "column" 2}} {"position" {"row" 3, "column" 1}})
  want: true

- name: Can attack on third diagonal
  code: can-attack({"position" {"row" 2, "column" 2}} {"position" {"row" 1, "column" 1}})
  want: true

- name: Can attack on fourth diagonal
  code: can-attack({"position" {"row" 1, "column" 7}} {"position" {"row" 0, "column" 6}})
  want: true

- name: Cannot attack if falling diagonals are only the same when reflected across the longest falling diagonal
  code: can-attack({"position" {"row" 4, "column" 1}} {"position" {"row" 2, "column" 5}})
  want: false

done: 13
