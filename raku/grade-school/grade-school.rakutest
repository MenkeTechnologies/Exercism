#!/usr/bin/env raku
use Test;
use JSON::Fast;
use lib $?FILE.IO.dirname;
use GradeSchool;
plan 7;

my @test-cases = from-json($=pod.pop.contents).List;
for @test-cases -> %case {
  cmp-ok
    roster( |%(<students grade> Z=> %case<input><students desiredGrade>:v) ),
    '~~', |%case<expected description>;
}

=head2 Test Cases
=begin code
[
  {
    "description": "Adding a student adds them to the sorted roster",
    "expected": [
      "Aimee"
    ],
    "input": {
      "students": [
        [
          "Aimee",
          2
        ]
      ]
    },
    "property": "roster"
  },
  {
    "description": "Adding more student adds them to the sorted roster",
    "expected": [
      "Blair",
      "James",
      "Paul"
    ],
    "input": {
      "students": [
        [
          "Blair",
          2
        ],
        [
          "James",
          2
        ],
        [
          "Paul",
          2
        ]
      ]
    },
    "property": "roster"
  },
  {
    "description": "Adding students to different grades adds them to the same sorted roster",
    "expected": [
      "Chelsea",
      "Logan"
    ],
    "input": {
      "students": [
        [
          "Chelsea",
          3
        ],
        [
          "Logan",
          7
        ]
      ]
    },
    "property": "roster"
  },
  {
    "description": "Roster returns an empty list if there are no students enrolled",
    "expected": [
    ],
    "input": {
      "students": [
      ]
    },
    "property": "roster"
  },
  {
    "description": "Student names with grades are displayed in the same sorted roster",
    "expected": [
      "Anna",
      "Barb",
      "Charlie",
      "Alex",
      "Peter",
      "Zoe",
      "Jim"
    ],
    "input": {
      "students": [
        [
          "Peter",
          2
        ],
        [
          "Anna",
          1
        ],
        [
          "Barb",
          1
        ],
        [
          "Zoe",
          2
        ],
        [
          "Alex",
          2
        ],
        [
          "Jim",
          3
        ],
        [
          "Charlie",
          1
        ]
      ]
    },
    "property": "roster"
  },
  {
    "description": "Grade returns the students in that grade in alphabetical order",
    "expected": [
      "Bradley",
      "Franklin"
    ],
    "input": {
      "desiredGrade": 5,
      "students": [
        [
          "Franklin",
          5
        ],
        [
          "Bradley",
          5
        ],
        [
          "Jeff",
          1
        ]
      ]
    },
    "property": "grade"
  },
  {
    "description": "Grade returns an empty list if there are no students in that grade",
    "expected": [
    ],
    "input": {
      "desiredGrade": 1,
      "students": [
      ]
    },
    "property": "grade"
  }
]
=end code
