#!/usr/bin/env tclsh
package require tcltest
namespace import ::tcltest::*
source testHelpers.tcl

############################################################
source "word-search.tcl"

# note that grid coordinates are 1-indexed

test ws-1 "Should accept an initial game grid and a target search word" -body {
    wordSearch {
        jefblpepre
    } {clojure}
} -returnCodes ok -match dictionary -result {
    clojure {}
}


test ws-2 "Should locate one word written left to right" -body {
    wordSearch {
        clojurermt
    } {clojure}
} -returnCodes ok -match dictionary -result {
    clojure {{1 1} {7 1}}
}


test ws-3 "Should locate the same word written left to right in a different position" -body {
    wordSearch {
        mtclojurer
    } {clojure}
} -returnCodes ok -match dictionary -result {
    clojure {{3 1} {9 1}}
}


test ws-4 "Should locate a different left to right word" -body {
    wordSearch {
        coffeelplx
    } {coffee}
} -returnCodes ok -match dictionary -result {
    coffee {{1 1} {6 1}}
}


test ws-5 "Should locate that different left to right word in a different position" -body {
    wordSearch {
        xcoffeezlp
    } {coffee}
} -returnCodes ok -match dictionary -result {
    coffee {{2 1} {7 1}}
}


test ws-6 "Should locate a left to right word in two line grid" -body {
    wordSearch {
        jefblpepre
        tclojurerm
    } {clojure}
} -returnCodes ok -match dictionary -result {
    clojure {{2 2} {8 2}}
}


test ws-7 "Should locate a left to right word in three line grid" -body {
    wordSearch {
        camdcimgtc
        jefblpepre
        clojurermt
    } {clojure}
} -returnCodes ok -match dictionary -result {
    clojure {{1 3} {7 3}}
}


test ws-8 "Should locate a left to right word in ten line grid" -body {
    wordSearch {
        jefblpepre
        camdcimgtc
        oivokprjsm
        pbwasqroua
        rixilelhrs
        wolcqlirpc
        screeaumgr
        alxhpburyi
        jalaycalmp
        clojurermt
    } {clojure}
} -returnCodes ok -match dictionary -result {
    clojure {{1 10} {7 10}}
}


test ws-9 "Should locate that left to right word in a different position in a ten line grid" -body {
    wordSearch {
        jefblpepre
        camdcimgtc
        oivokprjsm
        pbwasqroua
        rixilelhrs
        wolcqlirpc
        screeaumgr
        alxhpburyi
        clojurermt
        jalaycalmp
    } {clojure}
} -returnCodes ok -match dictionary -result {
    clojure {{1 9} {7 9}}
}


test ws-10 "Should locate a different left to right word in a ten line grid" -body {
    wordSearch {
        jefblpepre
        camdcimgtc
        oivokprjsm
        pbwasqroua
        rixilelhrs
        wolcqlirpc
        fortranftw
        alxhpburyi
        clojurermt
        jalaycalmp
    } {fortran}
} -returnCodes ok -match dictionary -result {
    fortran {{1 7} {7 7}}
}


test ws-11 "Should locate multiple words" -body {
    wordSearch {
        jefblpepre
        camdcimgtc
        oivokprjsm
        pbwasqroua
        rixilelhrs
        wolcqlirpc
        fortranftw
        alxhpburyi
        jalaycalmp
        clojurermt
    } {fortran clojure}
} -returnCodes ok -match dictionary -result {
    clojure {{1 10} {7 10}} 
    fortran {{1 7} {7 7}}
}


test ws-12 "Should locate a single word written right to left" -body {
    wordSearch {
        rixilelhrs
    } {elixir}
} -returnCodes ok -match dictionary -result {
    elixir {{6 1} {1 1}}
}


test ws-13 "Should locate multiple words written in different horizontal directions" -body {
    wordSearch {
        jefblpepre
        camdcimgtc
        oivokprjsm
        pbwasqroua
        rixilelhrs
        wolcqlirpc
        screeaumgr
        alxhpburyi
        jalaycalmp
        clojurermt
    } {elixir clojure}
} -returnCodes ok -match dictionary -result {
    clojure {{1 10} {7 10}} 
    elixir {{6 5} {1 5}}
}


test ws-14 "Should locate words written top to bottom" -body {
    wordSearch {
        jefblpepre
        camdcimgtc
        oivokprjsm
        pbwasqroua
        rixilelhrs
        wolcqlirpc
        screeaumgr
        alxhpburyi
        jalaycalmp
        clojurermt
    } {clojure elixir ecmascript}
} -returnCodes ok -match dictionary -result {
    clojure {{1 10} {7 10}} 
    elixir {{6 5} {1 5}} 
    ecmascript {{10 1} {10 10}}
}


test ws-15 "Should locate words written bottom to top" -body {
    wordSearch {
        jefblpepre
        camdcimgtc
        oivokprjsm
        pbwasqroua
        rixilelhrs
        wolcqlirpc
        screeaumgr
        alxhpburyi
        jalaycalmp
        clojurermt
    } {clojure elixir ecmascript rust}
} -returnCodes ok -match dictionary -result {
    clojure {{1 10} {7 10}} 
    elixir {{6 5} {1 5}} 
    ecmascript {{10 1} {10 10}} 
    rust {{9 5} {9 2}}
}


test ws-16 "Should locate words written top left to bottom right" -body {
    wordSearch {
        jefblpepre
        camdcimgtc
        oivokprjsm
        pbwasqroua
        rixilelhrs
        wolcqlirpc
        screeaumgr
        alxhpburyi
        jalaycalmp
        clojurermt
    } {clojure elixir ecmascript rust java}
} -returnCodes ok -match dictionary -result {
    clojure {{1 10} {7 10}} 
    elixir {{6 5} {1 5}} 
    ecmascript {{10 1} {10 10}} 
    rust {{9 5} {9 2}} 
    java {{1 1} {4 4}}
}


test ws-17 "Should locate words written bottom right to top left" -body {
    wordSearch {
        jefblpepre
        camdcimgtc
        oivokprjsm
        pbwasqroua
        rixilelhrs
        wolcqlirpc
        screeaumgr
        alxhpburyi
        jalaycalmp
        clojurermt
    } {clojure elixir ecmascript rust java lua}
} -returnCodes ok -match dictionary -result {
    clojure {{1 10} {7 10}} 
    elixir {{6 5} {1 5}} 
    ecmascript {{10 1} {10 10}} 
    rust {{9 5} {9 2}} 
    java {{1 1} {4 4}} 
    lua {{8 9} {6 7}}
}


test ws-18 "Should locate words written bottom left to top right" -body {
    wordSearch {
        jefblpepre
        camdcimgtc
        oivokprjsm
        pbwasqroua
        rixilelhrs
        wolcqlirpc
        screeaumgr
        alxhpburyi
        jalaycalmp
        clojurermt
    } {clojure elixir ecmascript rust java lua lisp}
} -returnCodes ok -match dictionary -result {
    clojure {{1 10} {7 10}} 
    elixir {{6 5} {1 5}} 
    ecmascript {{10 1} {10 10}} 
    rust {{9 5} {9 2}} 
    java {{1 1} {4 4}} 
    lua {{8 9} {6 7}} 
    lisp {{3 6} {6 3}}
}


test ws-19 "Should locate words written top right to bottom left" -body {
    wordSearch {
        jefblpepre
        camdcimgtc
        oivokprjsm
        pbwasqroua
        rixilelhrs
        wolcqlirpc
        screeaumgr
        alxhpburyi
        jalaycalmp
        clojurermt
    } {clojure elixir ecmascript rust java lua lisp ruby}
} -returnCodes ok -match dictionary -result {
    clojure {{1 10} {7 10}} 
    elixir {{6 5} {1 5}} 
    ecmascript {{10 1} {10 10}} 
    rust {{9 5} {9 2}} 
    java {{1 1} {4 4}} 
    lua {{8 9} {6 7}} 
    lisp {{3 6} {6 3}} 
    ruby {{8 6} {5 9}}
}


test ws-20 "Should fail to locate a word that is not in the puzzle" -body {
    wordSearch {
        jefblpepre
        camdcimgtc
        oivokprjsm
        pbwasqroua
        rixilelhrs
        wolcqlirpc
        screeaumgr
        alxhpburyi
        jalaycalmp
        clojurermt
    } {clojure elixir ecmascript rust java lua lisp ruby haskell}
} -returnCodes ok -match dictionary -result {
    clojure {{1 10} {7 10}} 
    elixir {{6 5} {1 5}} 
    ecmascript {{10 1} {10 10}} 
    rust {{9 5} {9 2}} 
    java {{1 1} {4 4}} 
    lua {{8 9} {6 7}} 
    lisp {{3 6} {6 3}} 
    ruby {{8 6} {5 9}} 
    haskell {}
}

cleanupTests
